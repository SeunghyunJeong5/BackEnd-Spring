
1. AWS EC2에 Ubuntu Linux 인트턴스(VM) 생성

2. Spring Boot 에서 배포파일 생성(runconfiguration들어가기)
	- JAR 파일 : 내장 톰캣으로 배포, 타임리프로 개발(뷰페이지를)
	- WAR 파일 : 외장 톰캣으로 사용, JSP
	
runconriguration들어가기
gradle task 더블클릭
add 눌러서 bootJar 명령어 넣기
working directory에 ${workspace_loc:/sbb}넣기
그리고 apply 하고 run
C:\workspace-STS4\sbb\build\libs 이 경로로 탐색기로 접속하면 jar 파일이 있음
배포파일을 : java -jar sbb-0.0.1-SNAPSHOT.jar하면 압축이 풀리는거 같음.


3. VM에 접속 후 기본 세팅
	- 컴퓨터 이름 변경
	ubuntu@ip-172-31-34-33:~$
	<계정명@서버명:현재작업폴더$>
	
	ls -la /etc/hostname
	이렇게 하면 권한을 확인할수있음.

	sudo vi /etc/hostname
	dd 눌러서 삭제하고
	i눌러서 srv1이라고 넣고 esc누르기
	:wq! 눌러서 빠져나오기
		
	
	- 시스템의 시간대 변경 : 서울 시간대로 설정
	sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime 
	입력하고 date 쳐보면 바뀜




4. VM에 JDK 17버전 설치 : jar 파일의 압축을 풀 수 있다.

java 라고 쳐보면 입력어를 안내해줌
sudo apt update 를 먼저 입력하고,
sudo apt install openjdk-17-jre-headless 라고 입력하면됨.
java -version 쳐서 확인



5. sbb-0.0.1-SNAPSHOT.jar을 서버에 전송
	- 업로드할 폴더 생성
	cd ~ 를 치고
	mkdir sbb 로 sbb폴더를 생성하고
	ls -la (현재 로그온한 계정이 쓰기 권한이 있는지 확인해야함)
	
	파일질라 실행
	파일누르고 사이트관리자에서 새사이트만들고 sftp로 바꾸고
	AWS에서 공용아이피 불러오고
	키파일로 바꾸고(ppk파일 찾아서 불러오고)
	ubuntu로 설정하고
	연결
	
	그리고 sbb폴더를 찾아서 jar파일을 드래그해서 올림
	cd sbb 치고 
	ls 치면 
	폴더안에 파일이 들어가있는게 확인됨
	
	cd sbb
	java -jar sbb-0.0.1-SNAPSHOT.jar 치면 작동이됨
	(이러면 jar파일은 내장 톰캣이 있어서 서비스가 바로 작동됨) --> 지금은 9696포트로 작동되고있는데 이걸 바꿀거임
	
6. AWS 방화벽에서 서비스되는 포트를 오픈
	보안탭가서 보안그룹 누르고 인바운드규칙편집하고
	TCP9696하고 80번포트 둘다 열기
	포트범위 하고 anywhere ip4하고 저장
	그리고 웹에 공용아이피:9696/하면 접속이 됨.
	
	
	그리고 이걸 백그라운드로 작동이 되게 바꿔야됨.
	putty창을 하나 더띄우고 ubuntu 계정으로 접속


7. 작동중인 서비스 확인	
	ps -ef | grep java | grep sbb 이렇게 입력
	
	ps -ef 치면 전체다 나옴
	
	
	(http://3.34.124.201:9696/h2-console/ 이걸치면 아직 접속이 안되는데
	cd ~ 치고
	ls -la 치면 mv.db가 만들어져있는게 나옴)
	
	
	UID : 계정에게 부여되는 고유번호
	PID : 프로세스에게 부여되는 고유번호
	GID : 그룹에게 부여되는 고유번호 
	
	프로세스 강제종료 (실행중인 서비스를 강제종료)
	sudo kill -9 PID 
	
	
	
	어쨌든 ps -ef | grep java | grep sbb 치면
	나오는 앞의 번호가 PID이므로 치면됨
	
	
	
	포트번호 바꾸고 application.propwerties에서
	그리고 build.gradle에서 버전 바꾸고 0.0.2로
	그리고 다시 run configuration(gradle task-new...)해서 같은과정 반복하고 run하면
	cd sbb 치고
	java -jar sbb-0.0.2-SNAPSHOT.jar 치면 작동이됨.
	이렇게하면 작동이 안되는데 application.propwerties에서 local2로 일단 바꿈


8. 9696 포트서비스 jar 파일을 80번 포트에 매핑
	주의 : 80번 포트로 서비스 시작할때는 sudo 명령어가 필요함
	sudo java -jar sbb-0.0.2-SNAPSHOT.jar
	
	sudo java -Dserver.port=80 -jar sbb-0.0.1-SNAPSHOT.jar

이러면 그냥 공용ip주소 넣으면 접속됨. 그리고 나중에 도메인 구입해서 ip주소를 매핑하면 도메인으로 갈수있음.



9. 서비스 작동시 백그라운드 모드로 작동 : &
	포그라운드 모드 sudo java -jar sbb-0.0.2-SNAPSHOT.jar
	백그라운드 모드 sudo java -jar sbb-0.0.2-SNAPSHOT.jar &
	
	
10. 서비스 시작 스크립트 : start.sh		(여기서도 80번포트짜리는 sudo를 넣어야함)
	VI에디터로 만들거임. JAR파일을 실행하는데, JAR파일을 실행할때 발생하는 log를 LOG에 저장하겠다는 코딩.
	cd ~ 하고
	vi start.sh하고 i누르고 밑에꺼를 복붙하고 :wq 하고나옴
	cat start.sh하면 내용나옴
	그리고 실행권한 부여해줘야함. sudo chmod +x start.sh
	그리고 ls -la start.sh 하면 부여된것을 볼수있음.
================================
#!/bin/bash

JAR=sbb/sbb-0.0.1-SNAPSHOT.jar
LOG=/home/ubuntu/sbb/sbb.log

nohup java -jar $JAR > $LOG 2>&1 &
================================	
실행 권한을 부여 : sudo chmod +x start.sh





11. 서비스 종료 스크립트	: stop.sh
 	cd ~ 하고
 	vi stop.sh하고 i누르고 밑에꺼를 복붙하고 :wq 하고나옴
	cat stop.sh하면 내용나옴
	그리고 실행권한 부여해줘야함. sudo chmod +x stop.sh
	그리고 ls -la stop.sh 하면 부여된것을 볼수있음.
 	
	print $2는 두번째 값이라는 뜻(PID를 의미)
	그러면 SBB_PID에 PID가 들어온다
================================
#!/bin/bash

SBB_PID=$(ps -ef | grep java | grep sbb | awk '{print $2}')

if [ -z "$SBB_PID" ];
then
	echo "SBB is not running"
else
	sudo kill -9 $SBB_PID
	echo "SBB stopped. "
fi
================================	
실행 권한을 부여 : sudo chmod +x stop.sh	
	
	
	
	
	
	
실행하기!!!!!!!!	
	
ls -l 치면
그 폴더에 권한을 다 표시해줌

그리고 ./start.sh 하면 실행됨
확인은 ps -ef | grep java | grep sbb
cd sbb
cat sbb.log 하면 로그를 볼수있음 (오류같은걸 파악)


./stop/sh 하면 끝남


======================================================================



3Tier : 
	- 한 시스템에 : Web Server, WAS, DB 다 같이 있으면 확장이 어렵다.
	- 3Tier 로 구성한 시스템은 확장이 쉽다.

Web Swerver(Nginx) ===> WAS(Tomcat) ===> DB (Oracle)

AWS VM 2개 생성
	- WEB : Web Server (TCP 80), WAS(Tomcat) (TCP 9696)
		AWS 공용 ip : 54.180.80.30
		- 호스트 이름 변경 : sudo hostnamectl set-hostname WEB
		- 시간대 설정 : sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
		- 방화벽 오픈 : TCP 80, TCP 9696
		- JDK 17버전 설치, jar 파일 압축을 풀어서 실행
			java
			sudo apt update
			sudo apt install openjdk-17-jre-headless
			java -version
		- Local Spring Boot 배포파일을 서버로 전송



	- DB : Oracle, 도커 레지스트리에서 Oracle 이미지 다운(TCP 1521)
		AWS 공용ip : 3.34.136.53
		- 호스트 이름 변경 : sudo hostnamectl set-hostname DB
		- 시간대 설정 : sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
		- 방화벽 오픈(AWS) : TCP 1521
		- 방화벽 오픈(VM)  : sudo ufw disable  ==> 우분투의 방화벽 비활성화
						  sudo reboot
		- 도커 설치 : 도커 레지스트리에서 Oracle 21 버전의 도커이미지 다운(레지스트리에서 가져와서 메모리에 올림)

=============================================================
도커 설치 : https://www.docker.com/
		  https://docs.docker.com/	: 공식 문서 사이트
		  https://hub.docker.com/	: 도커허브, 도커 이미지 저장소(Registry)
	- 리눅스 : 운영환경
		- Ubuntu, CentOS ===> 이름 변경됨
	- 윈도우, MAC : 테스트 환경, 개발

Docker Host : Docker Daemon, Registry 에 도커이미지를 로컬에 다운받아서 실행해서 메모리에 올림(이 상태를 도커 컨테이너라고 함) (Registry==도커허브)
	클라가 docker run 이라고 명령을 내리면 로컬에 이미지가 없으면 레지스트리에서 도커호스트로 이미지를 가져와서 메모리로 올림(도커데몬이 이 명령어들을 받아서 올림) 올라간 상태를 도커컨테이너라고함



//도커 설치 (DB에 설치)
 
 • // 기존의 도커 설치된 경우 도커 제거
$ sudo apt-get remove docker docker-engine docker.io containerd runc



• // 레파지토리 업데이트 , 요구 프로그램 설치
$ sudo apt-get update


$ sudo apt-get install \
ca-certificates \
curl \
gnupg \
lsb-release



• // 도커 GPG 키 설치
$ sudo mkdir -p /etc/apt/keyrings
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg




• // 레포지토리 URL 등록
$ echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null




• //도커 엔진 설치
$ sudo apt-get update
$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin



• // 도커 설치 확인
$ docker version



• // 계정 설정
$ sudo passwd root	==> root 계정의 패스워드 부여
암호 1234 넣고 엔터


$ su – root ===> 로그아웃없이 root계정으로 이동
root@DB:~#이런식으로 출력될거임


$ usermod -aG docker ubuntu			//vi /etc/group 
	//ubuntu 계정을 docker 그룹에 포함  
	//현재 로그온한 계정이 docker 그룹에 포함되어 있어야 docker의 기능을 사용할 수 있는 권한을 가진다. 

$ su - ubuntu 입력하면 ubuntu 계정으로 이동
$ docker치면 명령어가 안내됨	



=================================================================
설치 안내

설치 : DB에 설치 할거임
sudo apt-get update


sudo apt-get install \
ca-certificates \
curl \
gnupg \
lsb-release


sudo mkdir -p /etc/apt/keyrings

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg


키가 들어와있는지 확인 : ls /etc/apt/keyrings


echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null


sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin


docker version





================================================================
이제 오라클 도커이미지를 다운받을거임
https://hub.docker.com/r/gvenzl/oracle-xe 여기서 다운

// oracle-xe 최신버전이미지를 도커허브(Registry)에서 다운받아서 컨테이너로 실행 
docker run -d -p 1521:1521 -e ORACLE_PASSWORD=1234 gvenzl/oracle-xe  입력


docker run 				 : 도커이미지를 다운 받아서 실행(컨테이너)
		-d 			     : 백그라운드로 실행시켜라
-p 1521:1521   			 : 앞의 1521은 host, 뒤의 1521은 container의 포트번호 
-e ORACLE_PASSWORD=1234	 : system 계정의 패스워드
	gvenzl/oracle-xe	 : 도커허브계정/이미지명:버전
		

// 도커 컨테이너 정보보기
실행되고있는 이미지 정보 docker ps 입력

// 도커의 이미지 보기
docker images


==============================================================
먼저 DB의 방화벽 해제할것임(ubuntu에서)
VM의 방화벽 비활성화 
sudo ufw disable  ==> 우분투의 방화벽 비활성화

docker ps -a 해서 뭔가 있으면
docker rm -f 고유번호 해서 제거하고
다시 docker run..... 해서 실행
						  



oracle SQL developer 에서
플러스버튼 누르고 AWS-DB 입력

사용자이름 system
비번 1234
호스트 이름 3.34.136.53
포트 1521
xe 이렇게 하고 테스트


오라클이 안됨....
================================================================

// 도커 컨테이너 삭제를 하고 mysql로 해야됨

// 도커 컨테이너와 도커이미지를 모두 한꺼번에 제거 : 로컬에 있는 것을 제거하는것임
docker rm -f $(docker ps -a -q) && docker rmi -f $(docker images -q)

$ docker rm -f $(docker ps -aq)
$ docker rmi $(docker images -q)

// MySQL의 도커이미지 
$ docker run -d -p 3306:3306 --name db-mysql -e MYSQL_ROOT_PASSWORD=1234 mysql


docker pull (이미지 다운로드) + docker build (이미지 컨테이너화)










